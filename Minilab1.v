//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Minilab1(

    //////////// CLOCK //////////
    input                     CLOCK2_50,
    input                     CLOCK3_50,
    input                     CLOCK4_50,
    input                     CLOCK_50,

    //////////// SEG7 //////////
    output reg       [6:0]    HEX0,
    output reg       [6:0]    HEX1,
    output reg       [6:0]    HEX2,
    output reg       [6:0]    HEX3,
    output reg       [6:0]    HEX4,
    output reg       [6:0]    HEX5,

    //////////// KEY //////////
    input         [3:0]       KEY,

    //////////// LED //////////
    output        [9:0]       LEDR,

    //////////// SW //////////
    input         [9:0]       SW
);

  // Parameters
  localparam DATA_WIDTH = 8;
  localparam DEPTH      = 8;
  localparam NUM_MAC    = 8; 

  // HEX pattern parameters for the seven-seg displays
  parameter HEX_0  = 7'b1000000;  // zero
  parameter HEX_1  = 7'b1111001;  // one
  parameter HEX_2  = 7'b0100100;  // two
  parameter HEX_3  = 7'b0110000;  // three
  parameter HEX_4  = 7'b0011001;  // four
  parameter HEX_5  = 7'b0010010;  // five
  parameter HEX_6  = 7'b0000010;  // six
  parameter HEX_7  = 7'b1111000;  // seven
  parameter HEX_8  = 7'b0000000;  // eight
  parameter HEX_9  = 7'b0011000;  // nine
  parameter HEX_10 = 7'b0001000;  // ten
  parameter HEX_11 = 7'b0000011;  // eleven
  parameter HEX_12 = 7'b1000110;  // twelve
  parameter HEX_13 = 7'b0100001;  // thirteen
  parameter HEX_14 = 7'b0000110;  // fourteen
  parameter HEX_15 = 7'b0001110;  // fifteen
  parameter OFF    = 7'b1111111;  // all off

  //=======================================================
  //  REG/WIRE declarations
  //=======================================================

  // The MVM module now outputs a flattened bus containing all MAC results.
  // Each MAC result occupies DATA_WIDTH*3 bits.
  wire [(NUM_MAC*DATA_WIDTH*3)-1:0] result;

  // Example reset: using KEY[0] as active-low reset.
  wire rst_n;
  assign rst_n = KEY[0];

  //=======================================================
  //  Module Instantiation
  //=======================================================
  MVM #(
    .DATA_WIDTH(DATA_WIDTH),
    .NUM_MAC(NUM_MAC),  
    .DEPTH(DEPTH)
  ) iDUT (
    .clk   (CLOCK_50),
    .rst_n (rst_n),
    .Clr   (1'b0),
    .result(result)
  );

  //=======================================================
  //  Display Selection Logic
  //=======================================================
  // We use SW[7:0] as a one-hot selector:
  // If SW[0] is high, display MAC0's result;
  // if SW[1] is high (and SW[0] low), display MAC1's result; etc.
  // If none of SW[7:0] are high, we default to MAC0.
  reg [2:0] mac_sel;  // 3 bits are sufficient to select 0-7

  always @(*) begin
    if (SW[0])
      mac_sel = 3'd0;
    else if (SW[1])
      mac_sel = 3'd1;
    else if (SW[2])
      mac_sel = 3'd2;
    else if (SW[3])
      mac_sel = 3'd3;
    else if (SW[4])
      mac_sel = 3'd4;
    else if (SW[5])
      mac_sel = 3'd5;
    else if (SW[6])
      mac_sel = 3'd6;
    else if (SW[7])
      mac_sel = 3'd7;
    else
      mac_sel = 3'd0;  // Default to MAC0 when no selection is made.
  end

  // Extract the selected MAC's result from the flattened bus.
  // Since each MAC result occupies DATA_WIDTH*3 bits,
  // we use a case statement to select the proper slice.
  reg [DATA_WIDTH*3-1:0] selected_result;
  
  always @(*) begin
    case (mac_sel)
      3'd0: selected_result = result[DATA_WIDTH*3-1:0];
      3'd1: selected_result = result[(2*DATA_WIDTH*3)-1:DATA_WIDTH*3];
      3'd2: selected_result = result[(3*DATA_WIDTH*3)-1:(2*DATA_WIDTH*3)];
      3'd3: selected_result = result[(4*DATA_WIDTH*3)-1:(3*DATA_WIDTH*3)];
      3'd4: selected_result = result[(5*DATA_WIDTH*3)-1:(4*DATA_WIDTH*3)];
      3'd5: selected_result = result[(6*DATA_WIDTH*3)-1:(5*DATA_WIDTH*3)];
      3'd6: selected_result = result[(7*DATA_WIDTH*3)-1:(6*DATA_WIDTH*3)];
      3'd7: selected_result = result[(8*DATA_WIDTH*3)-1:(7*DATA_WIDTH*3)];
      default: selected_result = result[DATA_WIDTH*3-1:0];
    endcase
  end

  //=======================================================
  //  Seven-Segment Display Decoding
  //=======================================================
  // We assume that each MAC result is 24 bits (DATA_WIDTH*3) and we display
  // it over six HEX displays: HEX0 shows bits [3:0], HEX1 shows bits [7:4], etc.
  
  // HEX0: Display nibble [3:0]
  always @(*) begin
    if (|SW[7:0]) begin  // if any selection switch is on
      case(selected_result[3:0])
        4'd0: HEX0 = HEX_0;
        4'd1: HEX0 = HEX_1;
        4'd2: HEX0 = HEX_2;
        4'd3: HEX0 = HEX_3;
        4'd4: HEX0 = HEX_4;
        4'd5: HEX0 = HEX_5;
        4'd6: HEX0 = HEX_6;
        4'd7: HEX0 = HEX_7;
        4'd8: HEX0 = HEX_8;
        4'd9: HEX0 = HEX_9;
        4'd10: HEX0 = HEX_10;
        4'd11: HEX0 = HEX_11;
        4'd12: HEX0 = HEX_12;
        4'd13: HEX0 = HEX_13;
        4'd14: HEX0 = HEX_14;
        4'd15: HEX0 = HEX_15;
        default: HEX0 = OFF;
      endcase
    end else begin
      HEX0 = OFF;
    end
  end

  // HEX1: Display nibble [7:4]
  always @(*) begin
    if (|SW[7:0]) begin
      case(selected_result[7:4])
        4'd0: HEX1 = HEX_0;
        4'd1: HEX1 = HEX_1;
        4'd2: HEX1 = HEX_2;
        4'd3: HEX1 = HEX_3;
        4'd4: HEX1 = HEX_4;
        4'd5: HEX1 = HEX_5;
        4'd6: HEX1 = HEX_6;
        4'd7: HEX1 = HEX_7;
        4'd8: HEX1 = HEX_8;
        4'd9: HEX1 = HEX_9;
        4'd10: HEX1 = HEX_10;
        4'd11: HEX1 = HEX_11;
        4'd12: HEX1 = HEX_12;
        4'd13: HEX1 = HEX_13;
        4'd14: HEX1 = HEX_14;
        4'd15: HEX1 = HEX_15;
        default: HEX1 = OFF;
      endcase
    end else begin
      HEX1 = OFF;
    end
  end

  // HEX2: Display nibble [11:8]
  always @(*) begin
    if (|SW[7:0]) begin
      case(selected_result[11:8])
        4'd0: HEX2 = HEX_0;
        4'd1: HEX2 = HEX_1;
        4'd2: HEX2 = HEX_2;
        4'd3: HEX2 = HEX_3;
        4'd4: HEX2 = HEX_4;
        4'd5: HEX2 = HEX_5;
        4'd6: HEX2 = HEX_6;
        4'd7: HEX2 = HEX_7;
        4'd8: HEX2 = HEX_8;
        4'd9: HEX2 = HEX_9;
        4'd10: HEX2 = HEX_10;
        4'd11: HEX2 = HEX_11;
        4'd12: HEX2 = HEX_12;
        4'd13: HEX2 = HEX_13;
        4'd14: HEX2 = HEX_14;
        4'd15: HEX2 = HEX_15;
        default: HEX2 = OFF;
      endcase
    end else begin
      HEX2 = OFF;
    end
  end

  // HEX3: Display nibble [15:12]
  always @(*) begin
    if (|SW[7:0]) begin
      case(selected_result[15:12])
        4'd0: HEX3 = HEX_0;
        4'd1: HEX3 = HEX_1;
        4'd2: HEX3 = HEX_2;
        4'd3: HEX3 = HEX_3;
        4'd4: HEX3 = HEX_4;
        4'd5: HEX3 = HEX_5;
        4'd6: HEX3 = HEX_6;
        4'd7: HEX3 = HEX_7;
        4'd8: HEX3 = HEX_8;
        4'd9: HEX3 = HEX_9;
        4'd10: HEX3 = HEX_10;
        4'd11: HEX3 = HEX_11;
        4'd12: HEX3 = HEX_12;
        4'd13: HEX3 = HEX_13;
        4'd14: HEX3 = HEX_14;
        4'd15: HEX3 = HEX_15;
        default: HEX3 = OFF;
      endcase
    end else begin
      HEX3 = OFF;
    end
  end

  // HEX4: Display nibble [19:16]
  always @(*) begin
    if (|SW[7:0]) begin
      case(selected_result[19:16])
        4'd0: HEX4 = HEX_0;
        4'd1: HEX4 = HEX_1;
        4'd2: HEX4 = HEX_2;
        4'd3: HEX4 = HEX_3;
        4'd4: HEX4 = HEX_4;
        4'd5: HEX4 = HEX_5;
        4'd6: HEX4 = HEX_6;
        4'd7: HEX4 = HEX_7;
        4'd8: HEX4 = HEX_8;
        4'd9: HEX4 = HEX_9;
        4'd10: HEX4 = HEX_10;
        4'd11: HEX4 = HEX_11;
        4'd12: HEX4 = HEX_12;
        4'd13: HEX4 = HEX_13;
        4'd14: HEX4 = HEX_14;
        4'd15: HEX4 = HEX_15;
        default: HEX4 = OFF;
      endcase
    end else begin
      HEX4 = OFF;
    end
  end

  // HEX5: Display nibble [23:20]
  always @(*) begin
    if (|SW[7:0]) begin
      case(selected_result[23:20])
        4'd0: HEX5 = HEX_0;
        4'd1: HEX5 = HEX_1;
        4'd2: HEX5 = HEX_2;
        4'd3: HEX5 = HEX_3;
        4'd4: HEX5 = HEX_4;
        4'd5: HEX5 = HEX_5;
        4'd6: HEX5 = HEX_6;
        4'd7: HEX5 = HEX_7;
        4'd8: HEX5 = HEX_8;
        4'd9: HEX5 = HEX_9;
        4'd10: HEX5 = HEX_10;
        4'd11: HEX5 = HEX_11;
        4'd12: HEX5 = HEX_12;
        4'd13: HEX5 = HEX_13;
        4'd14: HEX5 = HEX_14;
        4'd15: HEX5 = HEX_15;
        default: HEX5 = OFF;
      endcase
    end else begin
      HEX5 = OFF;
    end
  end

endmodule

